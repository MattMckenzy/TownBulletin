@page "/modules"

<PageTitle>TR⚡GGERED - Modules</PageTitle>

<ModalPrompt @ref=ModalPromptReference></ModalPrompt>

<div class="d-flex w-100 align-items-center justify-content-between">
    <h3 class="text-white mb-3">Modules</h3>    
    @{
        string compileButtonTooltip;
        if (IsCompiling)
        {
            compileButtonTooltip = "Recompiling...";
        }
        else
        {
            compileButtonTooltip = "Recompile all modules.";            
        }
    }     
    <div data-bs-toggle="tooltip" data-bs-placement="left" data-bs-html="true" data-bs-trigger="hover"
        data-bs-original-title="@compileButtonTooltip" aria-label="@compileButtonTooltip">
        <button disabled=@IsCompiling class="btn btn-sm btn-@(IsCompiling ? "warning" : "danger")" @onclick=Compile>
            <img class="bi bi-arrow-clockwise" />
        </button>
    </div>
</div>

<ModulesList></ModulesList>

@code{
    [Inject]
    private ModuleService ModuleService { get; set; } = null!;

    [Inject]
    private IJSRuntime JSRuntime { get; set; } = null!;

    private ModalPrompt ModalPromptReference = null!;

    private bool IsCompiling { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JSRuntime.InvokeVoidAsync("setupTooltips");

        await base.OnAfterRenderAsync(firstRender);
    }

    private void Compile()
    {
        IsCompiling = true;

        _ = Task.Run(async () =>
        {
            try
            {
                ModuleService.CompileAllModules();
            }
            finally
            {
                IsCompiling = false;
                await ModalPromptReference.ShowModalPrompt(new()
                    {
                        Title = "Succesfully recompiled!",
                        Message = $"Successfully recompiled all available modules.",
                        CancelChoice = "Dismiss"
                    });
                await InvokeAsync(StateHasChanged);
            }
        });
    }
}