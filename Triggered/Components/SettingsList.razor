@using Triggered.Models

<ModalPrompt @ref=ModalPromptReference></ModalPrompt>

<div class="settings">
    
    @if (SettingKeys != null)
    {        
        <EntitySidebar Title="Settings"
            Items=@SettingKeys
            Categories=CategoryKeys
            CreateCallback=CreateSetting
            DeleteCallback=DeleteSetting
            LoadCallback=LoadSetting
            CurrentItem=@CurrentSetting.Key></EntitySidebar>
    }

    <div class="main mb-3">
        <div class="mb-3">
            <label for="settingName" class="form-label text-white">Name</label>
            <input type="text" class="form-control @(CurrentSettingKeyLocked ? "readonly" : string.IsNullOrWhiteSpace(CurrentSetting.Key) ? "is-invalid" : "is-valid")" id="settingName" value="@CurrentSetting.Key" 
                @oninput=@(async (ChangeEventArgs changeEventArgs) => await UpdateProperty(nameof(CurrentSetting.Key), changeEventArgs.Value!)) required=@(!CurrentSettingKeyLocked) readonly=@CurrentSettingKeyLocked>
        </div>    
        <div class="mb-3">
            <label for="entryMethod" class="form-label text-white">Value</label>
            <input type="text" class="form-control" id="settingValue" value="@CurrentSetting.Value" 
                @oninput=@(async (ChangeEventArgs changeEventArgs) => await UpdateProperty(nameof(CurrentSetting.Value), changeEventArgs.Value!))>
        </div>
        <div>
            <button class="btn btn-success @(!CurrentSettingIsValid || !CurrentSettingIsDirty ? "disabled" : string.Empty)" @onclick="SaveSetting" disabled="@(!CurrentSettingIsValid || !CurrentSettingIsDirty)">
                Save Setting
            </button>
        </div>
    </div>
</div>