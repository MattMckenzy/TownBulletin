@using Triggered.Extensions
@inherits RenderComponentBase

<div @ref="MenuRef" class="dropdown menu-actions">

    @if (IsLoading)
    {
        <input class="btn btn-light dropdown-toggle text-start form-control w-100" width="100" type="text"
            placeholder="@LoadingPlaceholder" disabled=@true>    
    }
    else
    {
        <input id="dropdownToggle@(Id)" class="btn btn-light dropdown-toggle text-start form-control w-100@(Validate ? (IsValid ? " is-valid" : " is-invalid") : string.Empty)" type="text" role="menubutton" 
            placeholder="@(Options.Any() ? PlaceholderText : NoOptionsText)" disabled=@(!Options.Any()) aria-haspopup="true" aria-controls="dropdownMenu@(Id)" aria-expanded="false" value=@SelectedText @oninput=Filter>
        <div id="dropdownMenu@(Id)" class="dropdown-menu" aria-labelledby="dropdownToggle@(Id)" role="menu">
        @if (FilteredOptions.Any())
        {
            if (Categories != null && Categories.Any())
            {
                string latestCategory = string.Empty;
                foreach(KeyValuePair<string, string> category in Categories)
                {
                    KeyValuePair<string, string> option = FilteredOptions.FirstOrDefault(option => option.Key.Equals(category.Key));
                    if (option.Key != null)
                    {
                        if (latestCategory != category.Value)
                        {
                            latestCategory = category.Value;
                            <h6 class="dropdown-header" role="none"><u>@category.Value</u></h6>
                        }
                        <button key="@option.Key" class="dropdown-item @(option.Value.Equals(SelectedText) ? "active": string.Empty)" @onclick="@(() => Select(option))" role="menuitem">@option.Value</button>            
                    }     
                }
            }
            else
            {
                foreach(KeyValuePair<string, string> keyValuePair in FilteredOptions)
                {
                    <button key="@keyValuePair.Key" class="dropdown-item @(keyValuePair.Value.Equals(SelectedText) ? "active": string.Empty)" @onclick="@(() => Select(keyValuePair))" role="menuitem">@keyValuePair.Value</button>            
                }                
            }
        }
        else
        {            
            <button class="dropdown-item disabled" disabled>@NoOptionsText</button>
        }
        </div>
    }
</div>

@code {
    [Inject]
    public IJSRuntime JSRuntime { get; set; } = null!;

    [Parameter]
    public string Selected { get; set; } = "";

    [Parameter, EditorRequired]
    public Dictionary<string, string> Options { get; set; } = null!;

    [Parameter]
    public Dictionary<string, string>? Categories { get; set; } = null;

    [Parameter]
    public EventCallback<ChangeEventArgs> OnChange { get; set; }

    [Parameter]
    public string? PlaceholderText { get; set; }

    [Parameter]
    public string? NoOptionsText { get; set; }

    [Parameter]
    public bool Validate { get; set; } = true;

    [Parameter]
    public bool IsLoading { get; set; } = false;

    private ElementReference MenuRef { get; set; }

    private Guid Id = Guid.NewGuid();

    private bool IsValid { get { return Options.Keys.Contains(Selected); } }
    private bool IsDropDownVisisble { get; set; }

    private Timer? LoadingTimer { get; set; }
    private string LoadingPlaceholder { get; set; } = "Loading...";

    private IEnumerable<KeyValuePair<string, string>> FilteredOptions { get; set; } = null!;    
    private string? SelectedText { get; set; }
    private string FilterText { get; set; } = string.Empty;

    private SemaphoreSlim LoadingSemaphoreSlim { get; } = new(1);

    [JSInvokable]
    public async void SelectInvokable(string key)
    {
        if (Options.TryGetValue(key, out string? value) && value != null)
        {
            await Select(new KeyValuePair<string, string>(key, value));
            await InvokeAsync(StateHasChanged);            
        }
    }

    private async Task Select(KeyValuePair<string, string> keyValuePair)
    {
        SelectedText = keyValuePair.Value;
        Selected = keyValuePair.Key;
        IsDropDownVisisble = false;
        await OnChange.InvokeAsync(new ChangeEventArgs() { Value = Selected });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await LoadingSemaphoreSlim.WaitAsync();

            if (IsLoading)
            {
                LoadingTimer = new Timer(async (object? state) =>
                {
                    LoadingPlaceholder = "Loading" + new string('.', ((LoadingPlaceholder.Length - 7) % 3) + 1);
                    await InvokeAsync(StateHasChanged);
                }, null, 400, 400);
            }
            else if (!IsLoading)
            {
                if (LoadingTimer != null)
                {
                    await LoadingTimer!.DisposeAsync();
                    LoadingTimer = null;
                }

                try
                {
                    await JSRuntime.InvokeVoidAsync("initializeMenuActions", DotNetObjectReference.Create(this), Id.ToString(), MenuRef);     
                }
                catch (JSDisconnectedException) { }
            }          
        }
        finally
        {
            LoadingSemaphoreSlim.Release();
        } 

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Options.TryGetValue(Selected, out string? selectedText))
            SelectedText = selectedText;
        else
            SelectedText = null;

        FilteredOptions = Options.AsEnumerable();

        await base.OnParametersSetAsync();
    }

    private void Filter(ChangeEventArgs changeEventArgs)
    {
        if (changeEventArgs.Value != null)
            FilterText = (string)changeEventArgs.Value;

        FilteredOptions = Options.Where(keyValuePair => keyValuePair.Value.Contains(FilterText, StringComparison.InvariantCultureIgnoreCase));

        RunAfterRender(async () => await JSRuntime.InvokeVoidAsync("updateMenuActions", Id.ToString()));
    }
}
