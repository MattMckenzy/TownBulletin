<aside class="sidebar">
    <div class="d-flex justify-content-between">
        <h5 class="text-white">@Title</h5>
        <button class="btn btn-module-add d-inline-flex align-items-center rounded text-white my-1 me-3 px-1 py-0" @onclick=@(async () => await CreateCallback.InvokeAsync())><span class="bi bi-plus-lg"></span></button>
    </div>
    <nav class="sidebar-list" id="modulesList" aria-label="Modules List">
        <ul class="list-unstyled mb-0 pt-md-1">

            @if(Categories != null)
            {
                string? lastSuperCategory = null;
                @foreach(KeyValuePair<string, IEnumerable<string>> category in Categories)
                {
                    string currentSuperCategory = category.Key.Split(".", StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries).FirstOrDefault()!;
                    string currentCategory = category.Key.Split(".", StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries).LastOrDefault()!;

                    if (!currentSuperCategory.Equals(lastSuperCategory) && !currentSuperCategory.Equals(currentCategory))
                    {
                        lastSuperCategory = currentSuperCategory;
                        <li class="mb-1">
                            <u class="text-white text-start pe-none opacity-75">
                                @currentSuperCategory
                            </u>
                        </li>
                    }

                    <li class="mb-1">
                        <button class="btn btn-event rounded collapsed text-white text-start text-truncate mw-100" data-bs-toggle="collapse" data-bs-target="#collapse@(currentCategory.GetHashCode())" aria-expanded="false">
                            <i class="bi bi-chevron-right"></i> @currentCategory
                        </button>
                        <div class="collapse" id="collapse@(currentCategory.GetHashCode())">   
                            <ul class="list-unstyled fw-normal pb-1 small">   
                                
                            @foreach (string itemKey in category.Value)
                            {
                                @if(Items.TryGetValue(itemKey, out string? itemValue) && itemValue != null)
                                {
                                    <li class="d-flex justify-content-between">
                                        <button class="btn btn-module-load @(CurrentItem == itemKey ? "selected" : string.Empty) d-inline-flex align-items-center rounded text-white mx-4 my-1 px-1 py-0" @onclick=@(async () => await LoadCallback.InvokeAsync(itemKey))>
                                            <span class="opacity-75">@itemValue</span>
                                        </button>
                                        <button class="btn btn-module-delete d-inline-flex align-items-center rounded text-white my-1 px-1 py-0" @onclick=@(async () => await DeleteCallback.InvokeAsync(itemKey))>
                                            🗙
                                        </button>
                                    </li>
                                }       
                            }

                            </ul>
                        </div>
                    </li>      
                }
            }
            else
            {
                @foreach (KeyValuePair<string, string> item in Items)
                {

                    <li class="d-flex justify-content-between">
                        <button class="btn btn-module-load @(CurrentItem == item.Key ? "selected" : string.Empty) d-inline-flex align-items-center rounded text-white mx-4 my-1 px-1 py-0" @onclick=@(async () => await LoadCallback.InvokeAsync(item.Key))>
                            <span  class="opacity-75">@item.Value</span>
                        </button>
                        <button class="btn btn-module-delete d-inline-flex align-items-center rounded text-white my-1 px-1 py-0" @onclick=@(async () => await DeleteCallback.InvokeAsync(item.Key))>
                            🗙
                        </button>
                    </li>
                }
            }
        </ul>
    </nav>
</aside>

@code {    
    [Parameter, EditorRequired]
    public string Title { get; set; } = null!;

    [Parameter, EditorRequired]
    public Dictionary<string, string> Items { get; set; } = null!;

    [Parameter]
    public Dictionary<string, IEnumerable<string>>? Categories { get; set; } = null;
            
    [Parameter]
    public string? CurrentItem { get; set; } = null;

    [Parameter]
    public EventCallback<string> DeleteCallback { get; set; }
    
    [Parameter]
    public EventCallback CreateCallback { get; set; }
    
    [Parameter]
    public EventCallback<string> LoadCallback { get; set; }
}